package thrift;/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StudentInfo implements org.apache.thrift.TBase<StudentInfo, StudentInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StudentInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField SCORE_BIG_FIELD_DESC = new org.apache.thrift.protocol.TField("score_big", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SCORE_SMALL_FIELD_DESC = new org.apache.thrift.protocol.TField("score_small", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField DISTRICT_FIELD_DESC = new org.apache.thrift.protocol.TField("district", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField GRADUATE_SCHOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("graduate_school", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PLANS_FIELD_DESC = new org.apache.thrift.protocol.TField("plans", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StudentInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StudentInfoTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public boolean sex; // required
  public double score_big; // required
  public double score_small; // required
  public String district; // required
  public String graduate_school; // required
  public List<StudentPlan> plans; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    SEX((short)3, "sex"),
    SCORE_BIG((short)4, "score_big"),
    SCORE_SMALL((short)5, "score_small"),
    DISTRICT((short)6, "district"),
    GRADUATE_SCHOOL((short)7, "graduate_school"),
    PLANS((short)8, "plans");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // SEX
          return SEX;
        case 4: // SCORE_BIG
          return SCORE_BIG;
        case 5: // SCORE_SMALL
          return SCORE_SMALL;
        case 6: // DISTRICT
          return DISTRICT;
        case 7: // GRADUATE_SCHOOL
          return GRADUATE_SCHOOL;
        case 8: // PLANS
          return PLANS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __SCORE_BIG_ISSET_ID = 2;
  private static final int __SCORE_SMALL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SCORE_BIG, new org.apache.thrift.meta_data.FieldMetaData("score_big", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SCORE_SMALL, new org.apache.thrift.meta_data.FieldMetaData("score_small", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISTRICT, new org.apache.thrift.meta_data.FieldMetaData("district", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRADUATE_SCHOOL, new org.apache.thrift.meta_data.FieldMetaData("graduate_school", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANS, new org.apache.thrift.meta_data.FieldMetaData("plans", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StudentPlan.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StudentInfo.class, metaDataMap);
  }

  public StudentInfo() {
  }

  public StudentInfo(
    int id,
    String name,
    boolean sex,
    double score_big,
    double score_small,
    String district,
    String graduate_school,
    List<StudentPlan> plans)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.sex = sex;
    setSexIsSet(true);
    this.score_big = score_big;
    setScore_bigIsSet(true);
    this.score_small = score_small;
    setScore_smallIsSet(true);
    this.district = district;
    this.graduate_school = graduate_school;
    this.plans = plans;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StudentInfo(StudentInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.sex = other.sex;
    this.score_big = other.score_big;
    this.score_small = other.score_small;
    if (other.isSetDistrict()) {
      this.district = other.district;
    }
    if (other.isSetGraduate_school()) {
      this.graduate_school = other.graduate_school;
    }
    if (other.isSetPlans()) {
      List<StudentPlan> __this__plans = new ArrayList<StudentPlan>();
      for (StudentPlan other_element : other.plans) {
        __this__plans.add(new StudentPlan(other_element));
      }
      this.plans = __this__plans;
    }
  }

  public StudentInfo deepCopy() {
    return new StudentInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setSexIsSet(false);
    this.sex = false;
    setScore_bigIsSet(false);
    this.score_big = 0.0;
    setScore_smallIsSet(false);
    this.score_small = 0.0;
    this.district = null;
    this.graduate_school = null;
    this.plans = null;
  }

  public int getId() {
    return this.id;
  }

  public StudentInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public StudentInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isSex() {
    return this.sex;
  }

  public StudentInfo setSex(boolean sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public double getScore_big() {
    return this.score_big;
  }

  public StudentInfo setScore_big(double score_big) {
    this.score_big = score_big;
    setScore_bigIsSet(true);
    return this;
  }

  public void unsetScore_big() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_BIG_ISSET_ID);
  }

  /** Returns true if field score_big is set (has been assigned a value) and false otherwise */
  public boolean isSetScore_big() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_BIG_ISSET_ID);
  }

  public void setScore_bigIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_BIG_ISSET_ID, value);
  }

  public double getScore_small() {
    return this.score_small;
  }

  public StudentInfo setScore_small(double score_small) {
    this.score_small = score_small;
    setScore_smallIsSet(true);
    return this;
  }

  public void unsetScore_small() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_SMALL_ISSET_ID);
  }

  /** Returns true if field score_small is set (has been assigned a value) and false otherwise */
  public boolean isSetScore_small() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_SMALL_ISSET_ID);
  }

  public void setScore_smallIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_SMALL_ISSET_ID, value);
  }

  public String getDistrict() {
    return this.district;
  }

  public StudentInfo setDistrict(String district) {
    this.district = district;
    return this;
  }

  public void unsetDistrict() {
    this.district = null;
  }

  /** Returns true if field district is set (has been assigned a value) and false otherwise */
  public boolean isSetDistrict() {
    return this.district != null;
  }

  public void setDistrictIsSet(boolean value) {
    if (!value) {
      this.district = null;
    }
  }

  public String getGraduate_school() {
    return this.graduate_school;
  }

  public StudentInfo setGraduate_school(String graduate_school) {
    this.graduate_school = graduate_school;
    return this;
  }

  public void unsetGraduate_school() {
    this.graduate_school = null;
  }

  /** Returns true if field graduate_school is set (has been assigned a value) and false otherwise */
  public boolean isSetGraduate_school() {
    return this.graduate_school != null;
  }

  public void setGraduate_schoolIsSet(boolean value) {
    if (!value) {
      this.graduate_school = null;
    }
  }

  public int getPlansSize() {
    return (this.plans == null) ? 0 : this.plans.size();
  }

  public java.util.Iterator<StudentPlan> getPlansIterator() {
    return (this.plans == null) ? null : this.plans.iterator();
  }

  public void addToPlans(StudentPlan elem) {
    if (this.plans == null) {
      this.plans = new ArrayList<StudentPlan>();
    }
    this.plans.add(elem);
  }

  public List<StudentPlan> getPlans() {
    return this.plans;
  }

  public StudentInfo setPlans(List<StudentPlan> plans) {
    this.plans = plans;
    return this;
  }

  public void unsetPlans() {
    this.plans = null;
  }

  /** Returns true if field plans is set (has been assigned a value) and false otherwise */
  public boolean isSetPlans() {
    return this.plans != null;
  }

  public void setPlansIsSet(boolean value) {
    if (!value) {
      this.plans = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Boolean)value);
      }
      break;

    case SCORE_BIG:
      if (value == null) {
        unsetScore_big();
      } else {
        setScore_big((Double)value);
      }
      break;

    case SCORE_SMALL:
      if (value == null) {
        unsetScore_small();
      } else {
        setScore_small((Double)value);
      }
      break;

    case DISTRICT:
      if (value == null) {
        unsetDistrict();
      } else {
        setDistrict((String)value);
      }
      break;

    case GRADUATE_SCHOOL:
      if (value == null) {
        unsetGraduate_school();
      } else {
        setGraduate_school((String)value);
      }
      break;

    case PLANS:
      if (value == null) {
        unsetPlans();
      } else {
        setPlans((List<StudentPlan>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case SEX:
      return Boolean.valueOf(isSex());

    case SCORE_BIG:
      return Double.valueOf(getScore_big());

    case SCORE_SMALL:
      return Double.valueOf(getScore_small());

    case DISTRICT:
      return getDistrict();

    case GRADUATE_SCHOOL:
      return getGraduate_school();

    case PLANS:
      return getPlans();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case SEX:
      return isSetSex();
    case SCORE_BIG:
      return isSetScore_big();
    case SCORE_SMALL:
      return isSetScore_small();
    case DISTRICT:
      return isSetDistrict();
    case GRADUATE_SCHOOL:
      return isSetGraduate_school();
    case PLANS:
      return isSetPlans();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StudentInfo)
      return this.equals((StudentInfo)that);
    return false;
  }

  public boolean equals(StudentInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_score_big = true;
    boolean that_present_score_big = true;
    if (this_present_score_big || that_present_score_big) {
      if (!(this_present_score_big && that_present_score_big))
        return false;
      if (this.score_big != that.score_big)
        return false;
    }

    boolean this_present_score_small = true;
    boolean that_present_score_small = true;
    if (this_present_score_small || that_present_score_small) {
      if (!(this_present_score_small && that_present_score_small))
        return false;
      if (this.score_small != that.score_small)
        return false;
    }

    boolean this_present_district = true && this.isSetDistrict();
    boolean that_present_district = true && that.isSetDistrict();
    if (this_present_district || that_present_district) {
      if (!(this_present_district && that_present_district))
        return false;
      if (!this.district.equals(that.district))
        return false;
    }

    boolean this_present_graduate_school = true && this.isSetGraduate_school();
    boolean that_present_graduate_school = true && that.isSetGraduate_school();
    if (this_present_graduate_school || that_present_graduate_school) {
      if (!(this_present_graduate_school && that_present_graduate_school))
        return false;
      if (!this.graduate_school.equals(that.graduate_school))
        return false;
    }

    boolean this_present_plans = true && this.isSetPlans();
    boolean that_present_plans = true && that.isSetPlans();
    if (this_present_plans || that_present_plans) {
      if (!(this_present_plans && that_present_plans))
        return false;
      if (!this.plans.equals(that.plans))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StudentInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StudentInfo typedOther = (StudentInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore_big()).compareTo(typedOther.isSetScore_big());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore_big()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score_big, typedOther.score_big);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore_small()).compareTo(typedOther.isSetScore_small());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore_small()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score_small, typedOther.score_small);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistrict()).compareTo(typedOther.isSetDistrict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistrict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.district, typedOther.district);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGraduate_school()).compareTo(typedOther.isSetGraduate_school());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGraduate_school()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.graduate_school, typedOther.graduate_school);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlans()).compareTo(typedOther.isSetPlans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plans, typedOther.plans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StudentInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score_big:");
    sb.append(this.score_big);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score_small:");
    sb.append(this.score_small);
    first = false;
    if (!first) sb.append(", ");
    sb.append("district:");
    if (this.district == null) {
      sb.append("null");
    } else {
      sb.append(this.district);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("graduate_school:");
    if (this.graduate_school == null) {
      sb.append("null");
    } else {
      sb.append(this.graduate_school);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plans:");
    if (this.plans == null) {
      sb.append("null");
    } else {
      sb.append(this.plans);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StudentInfoStandardSchemeFactory implements SchemeFactory {
    public StudentInfoStandardScheme getScheme() {
      return new StudentInfoStandardScheme();
    }
  }

  private static class StudentInfoStandardScheme extends StandardScheme<StudentInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StudentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sex = iprot.readBool();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCORE_BIG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score_big = iprot.readDouble();
              struct.setScore_bigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCORE_SMALL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score_small = iprot.readDouble();
              struct.setScore_smallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DISTRICT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.district = iprot.readString();
              struct.setDistrictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GRADUATE_SCHOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.graduate_school = iprot.readString();
              struct.setGraduate_schoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PLANS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.plans = new ArrayList<StudentPlan>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  StudentPlan _elem10; // required
                  _elem10 = new StudentPlan();
                  _elem10.read(iprot);
                  struct.plans.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setPlansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StudentInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeBool(struct.sex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCORE_BIG_FIELD_DESC);
      oprot.writeDouble(struct.score_big);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCORE_SMALL_FIELD_DESC);
      oprot.writeDouble(struct.score_small);
      oprot.writeFieldEnd();
      if (struct.district != null) {
        oprot.writeFieldBegin(DISTRICT_FIELD_DESC);
        oprot.writeString(struct.district);
        oprot.writeFieldEnd();
      }
      if (struct.graduate_school != null) {
        oprot.writeFieldBegin(GRADUATE_SCHOOL_FIELD_DESC);
        oprot.writeString(struct.graduate_school);
        oprot.writeFieldEnd();
      }
      if (struct.plans != null) {
        oprot.writeFieldBegin(PLANS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.plans.size()));
          for (StudentPlan _iter11 : struct.plans)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StudentInfoTupleSchemeFactory implements SchemeFactory {
    public StudentInfoTupleScheme getScheme() {
      return new StudentInfoTupleScheme();
    }
  }

  private static class StudentInfoTupleScheme extends TupleScheme<StudentInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StudentInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSex()) {
        optionals.set(2);
      }
      if (struct.isSetScore_big()) {
        optionals.set(3);
      }
      if (struct.isSetScore_small()) {
        optionals.set(4);
      }
      if (struct.isSetDistrict()) {
        optionals.set(5);
      }
      if (struct.isSetGraduate_school()) {
        optionals.set(6);
      }
      if (struct.isSetPlans()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSex()) {
        oprot.writeBool(struct.sex);
      }
      if (struct.isSetScore_big()) {
        oprot.writeDouble(struct.score_big);
      }
      if (struct.isSetScore_small()) {
        oprot.writeDouble(struct.score_small);
      }
      if (struct.isSetDistrict()) {
        oprot.writeString(struct.district);
      }
      if (struct.isSetGraduate_school()) {
        oprot.writeString(struct.graduate_school);
      }
      if (struct.isSetPlans()) {
        {
          oprot.writeI32(struct.plans.size());
          for (StudentPlan _iter12 : struct.plans)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StudentInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sex = iprot.readBool();
        struct.setSexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.score_big = iprot.readDouble();
        struct.setScore_bigIsSet(true);
      }
      if (incoming.get(4)) {
        struct.score_small = iprot.readDouble();
        struct.setScore_smallIsSet(true);
      }
      if (incoming.get(5)) {
        struct.district = iprot.readString();
        struct.setDistrictIsSet(true);
      }
      if (incoming.get(6)) {
        struct.graduate_school = iprot.readString();
        struct.setGraduate_schoolIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.plans = new ArrayList<StudentPlan>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            StudentPlan _elem15; // required
            _elem15 = new StudentPlan();
            _elem15.read(iprot);
            struct.plans.add(_elem15);
          }
        }
        struct.setPlansIsSet(true);
      }
    }
  }

}

