package thrift;/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LuquService {

  public interface Iface {

    public LuquResultStudent modifyStudent(StudentInfo studentinfo) throws org.apache.thrift.TException;

    public LuquResultSchool modifySchool(SchoolInfo schoolinfo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void modifyStudent(StudentInfo studentinfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyStudent_call> resultHandler) throws org.apache.thrift.TException;

    public void modifySchool(SchoolInfo schoolinfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifySchool_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public LuquResultStudent modifyStudent(StudentInfo studentinfo) throws org.apache.thrift.TException
    {
      send_modifyStudent(studentinfo);
      return recv_modifyStudent();
    }

    public void send_modifyStudent(StudentInfo studentinfo) throws org.apache.thrift.TException
    {
      modifyStudent_args args = new modifyStudent_args();
      args.setStudentinfo(studentinfo);
      sendBase("modifyStudent", args);
    }

    public LuquResultStudent recv_modifyStudent() throws org.apache.thrift.TException
    {
      modifyStudent_result result = new modifyStudent_result();
      receiveBase(result, "modifyStudent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyStudent failed: unknown result");
    }

    public LuquResultSchool modifySchool(SchoolInfo schoolinfo) throws org.apache.thrift.TException
    {
      send_modifySchool(schoolinfo);
      return recv_modifySchool();
    }

    public void send_modifySchool(SchoolInfo schoolinfo) throws org.apache.thrift.TException
    {
      modifySchool_args args = new modifySchool_args();
      args.setSchoolinfo(schoolinfo);
      sendBase("modifySchool", args);
    }

    public LuquResultSchool recv_modifySchool() throws org.apache.thrift.TException
    {
      modifySchool_result result = new modifySchool_result();
      receiveBase(result, "modifySchool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifySchool failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void modifyStudent(StudentInfo studentinfo, org.apache.thrift.async.AsyncMethodCallback<modifyStudent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyStudent_call method_call = new modifyStudent_call(studentinfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private StudentInfo studentinfo;
      public modifyStudent_call(StudentInfo studentinfo, org.apache.thrift.async.AsyncMethodCallback<modifyStudent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentinfo = studentinfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyStudent_args args = new modifyStudent_args();
        args.setStudentinfo(studentinfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LuquResultStudent getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyStudent();
      }
    }

    public void modifySchool(SchoolInfo schoolinfo, org.apache.thrift.async.AsyncMethodCallback<modifySchool_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifySchool_call method_call = new modifySchool_call(schoolinfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifySchool_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SchoolInfo schoolinfo;
      public modifySchool_call(SchoolInfo schoolinfo, org.apache.thrift.async.AsyncMethodCallback<modifySchool_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.schoolinfo = schoolinfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifySchool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifySchool_args args = new modifySchool_args();
        args.setSchoolinfo(schoolinfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LuquResultSchool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifySchool();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("modifyStudent", new modifyStudent());
      processMap.put("modifySchool", new modifySchool());
      return processMap;
    }

    public static class modifyStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyStudent_args> {
      public modifyStudent() {
        super("modifyStudent");
      }

      public modifyStudent_args getEmptyArgsInstance() {
        return new modifyStudent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifyStudent_result getResult(I iface, modifyStudent_args args) throws org.apache.thrift.TException {
        modifyStudent_result result = new modifyStudent_result();
        result.success = iface.modifyStudent(args.studentinfo);
        return result;
      }
    }

    public static class modifySchool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifySchool_args> {
      public modifySchool() {
        super("modifySchool");
      }

      public modifySchool_args getEmptyArgsInstance() {
        return new modifySchool_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifySchool_result getResult(I iface, modifySchool_args args) throws org.apache.thrift.TException {
        modifySchool_result result = new modifySchool_result();
        result.success = iface.modifySchool(args.schoolinfo);
        return result;
      }
    }

  }

  public static class modifyStudent_args implements org.apache.thrift.TBase<modifyStudent_args, modifyStudent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyStudent_args");

    private static final org.apache.thrift.protocol.TField STUDENTINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("studentinfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyStudent_argsTupleSchemeFactory());
    }

    public StudentInfo studentinfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENTINFO((short)1, "studentinfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENTINFO
            return STUDENTINFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENTINFO, new org.apache.thrift.meta_data.FieldMetaData("studentinfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StudentInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyStudent_args.class, metaDataMap);
    }

    public modifyStudent_args() {
    }

    public modifyStudent_args(
      StudentInfo studentinfo)
    {
      this();
      this.studentinfo = studentinfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyStudent_args(modifyStudent_args other) {
      if (other.isSetStudentinfo()) {
        this.studentinfo = new StudentInfo(other.studentinfo);
      }
    }

    public modifyStudent_args deepCopy() {
      return new modifyStudent_args(this);
    }

    @Override
    public void clear() {
      this.studentinfo = null;
    }

    public StudentInfo getStudentinfo() {
      return this.studentinfo;
    }

    public modifyStudent_args setStudentinfo(StudentInfo studentinfo) {
      this.studentinfo = studentinfo;
      return this;
    }

    public void unsetStudentinfo() {
      this.studentinfo = null;
    }

    /** Returns true if field studentinfo is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentinfo() {
      return this.studentinfo != null;
    }

    public void setStudentinfoIsSet(boolean value) {
      if (!value) {
        this.studentinfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENTINFO:
        if (value == null) {
          unsetStudentinfo();
        } else {
          setStudentinfo((StudentInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENTINFO:
        return getStudentinfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENTINFO:
        return isSetStudentinfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyStudent_args)
        return this.equals((modifyStudent_args)that);
      return false;
    }

    public boolean equals(modifyStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_studentinfo = true && this.isSetStudentinfo();
      boolean that_present_studentinfo = true && that.isSetStudentinfo();
      if (this_present_studentinfo || that_present_studentinfo) {
        if (!(this_present_studentinfo && that_present_studentinfo))
          return false;
        if (!this.studentinfo.equals(that.studentinfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyStudent_args typedOther = (modifyStudent_args)other;

      lastComparison = Boolean.valueOf(isSetStudentinfo()).compareTo(typedOther.isSetStudentinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentinfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentinfo, typedOther.studentinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyStudent_args(");
      boolean first = true;

      sb.append("studentinfo:");
      if (this.studentinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.studentinfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (studentinfo != null) {
        studentinfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyStudent_argsStandardSchemeFactory implements SchemeFactory {
      public modifyStudent_argsStandardScheme getScheme() {
        return new modifyStudent_argsStandardScheme();
      }
    }

    private static class modifyStudent_argsStandardScheme extends StandardScheme<modifyStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENTINFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.studentinfo = new StudentInfo();
                struct.studentinfo.read(iprot);
                struct.setStudentinfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.studentinfo != null) {
          oprot.writeFieldBegin(STUDENTINFO_FIELD_DESC);
          struct.studentinfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyStudent_argsTupleSchemeFactory implements SchemeFactory {
      public modifyStudent_argsTupleScheme getScheme() {
        return new modifyStudent_argsTupleScheme();
      }
    }

    private static class modifyStudent_argsTupleScheme extends TupleScheme<modifyStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentinfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStudentinfo()) {
          struct.studentinfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.studentinfo = new StudentInfo();
          struct.studentinfo.read(iprot);
          struct.setStudentinfoIsSet(true);
        }
      }
    }

  }

  public static class modifyStudent_result implements org.apache.thrift.TBase<modifyStudent_result, modifyStudent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyStudent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyStudent_resultTupleSchemeFactory());
    }

    public LuquResultStudent success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LuquResultStudent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyStudent_result.class, metaDataMap);
    }

    public modifyStudent_result() {
    }

    public modifyStudent_result(
      LuquResultStudent success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyStudent_result(modifyStudent_result other) {
      if (other.isSetSuccess()) {
        this.success = new LuquResultStudent(other.success);
      }
    }

    public modifyStudent_result deepCopy() {
      return new modifyStudent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LuquResultStudent getSuccess() {
      return this.success;
    }

    public modifyStudent_result setSuccess(LuquResultStudent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LuquResultStudent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyStudent_result)
        return this.equals((modifyStudent_result)that);
      return false;
    }

    public boolean equals(modifyStudent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyStudent_result typedOther = (modifyStudent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyStudent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyStudent_resultStandardSchemeFactory implements SchemeFactory {
      public modifyStudent_resultStandardScheme getScheme() {
        return new modifyStudent_resultStandardScheme();
      }
    }

    private static class modifyStudent_resultStandardScheme extends StandardScheme<modifyStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LuquResultStudent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyStudent_resultTupleSchemeFactory implements SchemeFactory {
      public modifyStudent_resultTupleScheme getScheme() {
        return new modifyStudent_resultTupleScheme();
      }
    }

    private static class modifyStudent_resultTupleScheme extends TupleScheme<modifyStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LuquResultStudent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class modifySchool_args implements org.apache.thrift.TBase<modifySchool_args, modifySchool_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifySchool_args");

    private static final org.apache.thrift.protocol.TField SCHOOLINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolinfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifySchool_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifySchool_argsTupleSchemeFactory());
    }

    public SchoolInfo schoolinfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHOOLINFO((short)1, "schoolinfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHOOLINFO
            return SCHOOLINFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHOOLINFO, new org.apache.thrift.meta_data.FieldMetaData("schoolinfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SchoolInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifySchool_args.class, metaDataMap);
    }

    public modifySchool_args() {
    }

    public modifySchool_args(
      SchoolInfo schoolinfo)
    {
      this();
      this.schoolinfo = schoolinfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifySchool_args(modifySchool_args other) {
      if (other.isSetSchoolinfo()) {
        this.schoolinfo = new SchoolInfo(other.schoolinfo);
      }
    }

    public modifySchool_args deepCopy() {
      return new modifySchool_args(this);
    }

    @Override
    public void clear() {
      this.schoolinfo = null;
    }

    public SchoolInfo getSchoolinfo() {
      return this.schoolinfo;
    }

    public modifySchool_args setSchoolinfo(SchoolInfo schoolinfo) {
      this.schoolinfo = schoolinfo;
      return this;
    }

    public void unsetSchoolinfo() {
      this.schoolinfo = null;
    }

    /** Returns true if field schoolinfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSchoolinfo() {
      return this.schoolinfo != null;
    }

    public void setSchoolinfoIsSet(boolean value) {
      if (!value) {
        this.schoolinfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHOOLINFO:
        if (value == null) {
          unsetSchoolinfo();
        } else {
          setSchoolinfo((SchoolInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHOOLINFO:
        return getSchoolinfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHOOLINFO:
        return isSetSchoolinfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifySchool_args)
        return this.equals((modifySchool_args)that);
      return false;
    }

    public boolean equals(modifySchool_args that) {
      if (that == null)
        return false;

      boolean this_present_schoolinfo = true && this.isSetSchoolinfo();
      boolean that_present_schoolinfo = true && that.isSetSchoolinfo();
      if (this_present_schoolinfo || that_present_schoolinfo) {
        if (!(this_present_schoolinfo && that_present_schoolinfo))
          return false;
        if (!this.schoolinfo.equals(that.schoolinfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifySchool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifySchool_args typedOther = (modifySchool_args)other;

      lastComparison = Boolean.valueOf(isSetSchoolinfo()).compareTo(typedOther.isSetSchoolinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchoolinfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolinfo, typedOther.schoolinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifySchool_args(");
      boolean first = true;

      sb.append("schoolinfo:");
      if (this.schoolinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.schoolinfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (schoolinfo != null) {
        schoolinfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifySchool_argsStandardSchemeFactory implements SchemeFactory {
      public modifySchool_argsStandardScheme getScheme() {
        return new modifySchool_argsStandardScheme();
      }
    }

    private static class modifySchool_argsStandardScheme extends StandardScheme<modifySchool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifySchool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHOOLINFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.schoolinfo = new SchoolInfo();
                struct.schoolinfo.read(iprot);
                struct.setSchoolinfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifySchool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schoolinfo != null) {
          oprot.writeFieldBegin(SCHOOLINFO_FIELD_DESC);
          struct.schoolinfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifySchool_argsTupleSchemeFactory implements SchemeFactory {
      public modifySchool_argsTupleScheme getScheme() {
        return new modifySchool_argsTupleScheme();
      }
    }

    private static class modifySchool_argsTupleScheme extends TupleScheme<modifySchool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifySchool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSchoolinfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSchoolinfo()) {
          struct.schoolinfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifySchool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.schoolinfo = new SchoolInfo();
          struct.schoolinfo.read(iprot);
          struct.setSchoolinfoIsSet(true);
        }
      }
    }

  }

  public static class modifySchool_result implements org.apache.thrift.TBase<modifySchool_result, modifySchool_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifySchool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifySchool_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifySchool_resultTupleSchemeFactory());
    }

    public LuquResultSchool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LuquResultSchool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifySchool_result.class, metaDataMap);
    }

    public modifySchool_result() {
    }

    public modifySchool_result(
      LuquResultSchool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifySchool_result(modifySchool_result other) {
      if (other.isSetSuccess()) {
        this.success = new LuquResultSchool(other.success);
      }
    }

    public modifySchool_result deepCopy() {
      return new modifySchool_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LuquResultSchool getSuccess() {
      return this.success;
    }

    public modifySchool_result setSuccess(LuquResultSchool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LuquResultSchool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifySchool_result)
        return this.equals((modifySchool_result)that);
      return false;
    }

    public boolean equals(modifySchool_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifySchool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifySchool_result typedOther = (modifySchool_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifySchool_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifySchool_resultStandardSchemeFactory implements SchemeFactory {
      public modifySchool_resultStandardScheme getScheme() {
        return new modifySchool_resultStandardScheme();
      }
    }

    private static class modifySchool_resultStandardScheme extends StandardScheme<modifySchool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifySchool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LuquResultSchool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifySchool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifySchool_resultTupleSchemeFactory implements SchemeFactory {
      public modifySchool_resultTupleScheme getScheme() {
        return new modifySchool_resultTupleScheme();
      }
    }

    private static class modifySchool_resultTupleScheme extends TupleScheme<modifySchool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifySchool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifySchool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LuquResultSchool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
