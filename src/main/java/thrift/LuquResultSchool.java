package thrift;/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LuquResultSchool implements org.apache.thrift.TBase<LuquResultSchool, LuquResultSchool._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LuquResultSchool");

  private static final org.apache.thrift.protocol.TField STUDENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("students", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SCHOOL_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolResult", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LuquResultSchoolStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LuquResultSchoolTupleSchemeFactory());
  }

  public List<StudentInfo> students; // required
  public List<NeedAndReal> schoolResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STUDENTS((short)1, "students"),
    SCHOOL_RESULT((short)2, "schoolResult");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STUDENTS
          return STUDENTS;
        case 2: // SCHOOL_RESULT
          return SCHOOL_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STUDENTS, new org.apache.thrift.meta_data.FieldMetaData("students", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StudentInfo.class))));
    tmpMap.put(_Fields.SCHOOL_RESULT, new org.apache.thrift.meta_data.FieldMetaData("schoolResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeedAndReal.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LuquResultSchool.class, metaDataMap);
  }

  public LuquResultSchool() {
  }

  public LuquResultSchool(
    List<StudentInfo> students,
    List<NeedAndReal> schoolResult)
  {
    this();
    this.students = students;
    this.schoolResult = schoolResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LuquResultSchool(LuquResultSchool other) {
    if (other.isSetStudents()) {
      List<StudentInfo> __this__students = new ArrayList<StudentInfo>();
      for (StudentInfo other_element : other.students) {
        __this__students.add(new StudentInfo(other_element));
      }
      this.students = __this__students;
    }
    if (other.isSetSchoolResult()) {
      List<NeedAndReal> __this__schoolResult = new ArrayList<NeedAndReal>();
      for (NeedAndReal other_element : other.schoolResult) {
        __this__schoolResult.add(new NeedAndReal(other_element));
      }
      this.schoolResult = __this__schoolResult;
    }
  }

  public LuquResultSchool deepCopy() {
    return new LuquResultSchool(this);
  }

  @Override
  public void clear() {
    this.students = null;
    this.schoolResult = null;
  }

  public int getStudentsSize() {
    return (this.students == null) ? 0 : this.students.size();
  }

  public java.util.Iterator<StudentInfo> getStudentsIterator() {
    return (this.students == null) ? null : this.students.iterator();
  }

  public void addToStudents(StudentInfo elem) {
    if (this.students == null) {
      this.students = new ArrayList<StudentInfo>();
    }
    this.students.add(elem);
  }

  public List<StudentInfo> getStudents() {
    return this.students;
  }

  public LuquResultSchool setStudents(List<StudentInfo> students) {
    this.students = students;
    return this;
  }

  public void unsetStudents() {
    this.students = null;
  }

  /** Returns true if field students is set (has been assigned a value) and false otherwise */
  public boolean isSetStudents() {
    return this.students != null;
  }

  public void setStudentsIsSet(boolean value) {
    if (!value) {
      this.students = null;
    }
  }

  public int getSchoolResultSize() {
    return (this.schoolResult == null) ? 0 : this.schoolResult.size();
  }

  public java.util.Iterator<NeedAndReal> getSchoolResultIterator() {
    return (this.schoolResult == null) ? null : this.schoolResult.iterator();
  }

  public void addToSchoolResult(NeedAndReal elem) {
    if (this.schoolResult == null) {
      this.schoolResult = new ArrayList<NeedAndReal>();
    }
    this.schoolResult.add(elem);
  }

  public List<NeedAndReal> getSchoolResult() {
    return this.schoolResult;
  }

  public LuquResultSchool setSchoolResult(List<NeedAndReal> schoolResult) {
    this.schoolResult = schoolResult;
    return this;
  }

  public void unsetSchoolResult() {
    this.schoolResult = null;
  }

  /** Returns true if field schoolResult is set (has been assigned a value) and false otherwise */
  public boolean isSetSchoolResult() {
    return this.schoolResult != null;
  }

  public void setSchoolResultIsSet(boolean value) {
    if (!value) {
      this.schoolResult = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STUDENTS:
      if (value == null) {
        unsetStudents();
      } else {
        setStudents((List<StudentInfo>)value);
      }
      break;

    case SCHOOL_RESULT:
      if (value == null) {
        unsetSchoolResult();
      } else {
        setSchoolResult((List<NeedAndReal>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STUDENTS:
      return getStudents();

    case SCHOOL_RESULT:
      return getSchoolResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STUDENTS:
      return isSetStudents();
    case SCHOOL_RESULT:
      return isSetSchoolResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LuquResultSchool)
      return this.equals((LuquResultSchool)that);
    return false;
  }

  public boolean equals(LuquResultSchool that) {
    if (that == null)
      return false;

    boolean this_present_students = true && this.isSetStudents();
    boolean that_present_students = true && that.isSetStudents();
    if (this_present_students || that_present_students) {
      if (!(this_present_students && that_present_students))
        return false;
      if (!this.students.equals(that.students))
        return false;
    }

    boolean this_present_schoolResult = true && this.isSetSchoolResult();
    boolean that_present_schoolResult = true && that.isSetSchoolResult();
    if (this_present_schoolResult || that_present_schoolResult) {
      if (!(this_present_schoolResult && that_present_schoolResult))
        return false;
      if (!this.schoolResult.equals(that.schoolResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LuquResultSchool other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LuquResultSchool typedOther = (LuquResultSchool)other;

    lastComparison = Boolean.valueOf(isSetStudents()).compareTo(typedOther.isSetStudents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.students, typedOther.students);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchoolResult()).compareTo(typedOther.isSetSchoolResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchoolResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolResult, typedOther.schoolResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LuquResultSchool(");
    boolean first = true;

    sb.append("students:");
    if (this.students == null) {
      sb.append("null");
    } else {
      sb.append(this.students);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schoolResult:");
    if (this.schoolResult == null) {
      sb.append("null");
    } else {
      sb.append(this.schoolResult);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LuquResultSchoolStandardSchemeFactory implements SchemeFactory {
    public LuquResultSchoolStandardScheme getScheme() {
      return new LuquResultSchoolStandardScheme();
    }
  }

  private static class LuquResultSchoolStandardScheme extends StandardScheme<LuquResultSchool> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LuquResultSchool struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STUDENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.students = new ArrayList<StudentInfo>(_list26.size);
                for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                {
                  StudentInfo _elem28; // required
                  _elem28 = new StudentInfo();
                  _elem28.read(iprot);
                  struct.students.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setStudentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHOOL_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                struct.schoolResult = new ArrayList<NeedAndReal>(_list29.size);
                for (int _i30 = 0; _i30 < _list29.size; ++_i30)
                {
                  NeedAndReal _elem31; // required
                  _elem31 = new NeedAndReal();
                  _elem31.read(iprot);
                  struct.schoolResult.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setSchoolResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LuquResultSchool struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.students != null) {
        oprot.writeFieldBegin(STUDENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.students.size()));
          for (StudentInfo _iter32 : struct.students)
          {
            _iter32.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schoolResult != null) {
        oprot.writeFieldBegin(SCHOOL_RESULT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.schoolResult.size()));
          for (NeedAndReal _iter33 : struct.schoolResult)
          {
            _iter33.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LuquResultSchoolTupleSchemeFactory implements SchemeFactory {
    public LuquResultSchoolTupleScheme getScheme() {
      return new LuquResultSchoolTupleScheme();
    }
  }

  private static class LuquResultSchoolTupleScheme extends TupleScheme<LuquResultSchool> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LuquResultSchool struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStudents()) {
        optionals.set(0);
      }
      if (struct.isSetSchoolResult()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStudents()) {
        {
          oprot.writeI32(struct.students.size());
          for (StudentInfo _iter34 : struct.students)
          {
            _iter34.write(oprot);
          }
        }
      }
      if (struct.isSetSchoolResult()) {
        {
          oprot.writeI32(struct.schoolResult.size());
          for (NeedAndReal _iter35 : struct.schoolResult)
          {
            _iter35.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LuquResultSchool struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.students = new ArrayList<StudentInfo>(_list36.size);
          for (int _i37 = 0; _i37 < _list36.size; ++_i37)
          {
            StudentInfo _elem38; // required
            _elem38 = new StudentInfo();
            _elem38.read(iprot);
            struct.students.add(_elem38);
          }
        }
        struct.setStudentsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.schoolResult = new ArrayList<NeedAndReal>(_list39.size);
          for (int _i40 = 0; _i40 < _list39.size; ++_i40)
          {
            NeedAndReal _elem41; // required
            _elem41 = new NeedAndReal();
            _elem41.read(iprot);
            struct.schoolResult.add(_elem41);
          }
        }
        struct.setSchoolResultIsSet(true);
      }
    }
  }

}

